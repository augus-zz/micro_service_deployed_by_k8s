// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

/*
Package user is a generated protocol buffer package.

It is generated from these files:
	user.proto

It has these top-level messages:
	User
	UsersRequest
	UsersSearchRequest
	UserRequest
	UsersResponse
	UserResponse
	Store
	StoresRequest
	StoresSearchRequest
	StoreRequest
	StoresResponse
	StoreResponse
	Customer
	CustomersRequest
	CustomersSearchRequest
	CustomerRequest
	CustomersResponse
	CustomerResponse
*/
package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type User struct {
	Id    int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Phone string `protobuf:"bytes,3,opt,name=phone" json:"phone,omitempty"`
	Email string `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
	Role  int32  `protobuf:"varint,5,opt,name=role" json:"role,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *User) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetRole() int32 {
	if m != nil {
		return m.Role
	}
	return 0
}

type UsersRequest struct {
	Ids []int32 `protobuf:"varint,1,rep,packed,name=ids" json:"ids,omitempty"`
}

func (m *UsersRequest) Reset()                    { *m = UsersRequest{} }
func (m *UsersRequest) String() string            { return proto.CompactTextString(m) }
func (*UsersRequest) ProtoMessage()               {}
func (*UsersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UsersRequest) GetIds() []int32 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type UsersSearchRequest struct {
	Names []string `protobuf:"bytes,1,rep,name=names" json:"names,omitempty"`
}

func (m *UsersSearchRequest) Reset()                    { *m = UsersSearchRequest{} }
func (m *UsersSearchRequest) String() string            { return proto.CompactTextString(m) }
func (*UsersSearchRequest) ProtoMessage()               {}
func (*UsersSearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UsersSearchRequest) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type UserRequest struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *UserRequest) Reset()                    { *m = UserRequest{} }
func (m *UserRequest) String() string            { return proto.CompactTextString(m) }
func (*UserRequest) ProtoMessage()               {}
func (*UserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UserRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UsersResponse struct {
	Users []*User `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
}

func (m *UsersResponse) Reset()                    { *m = UsersResponse{} }
func (m *UsersResponse) String() string            { return proto.CompactTextString(m) }
func (*UsersResponse) ProtoMessage()               {}
func (*UsersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UsersResponse) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type UserResponse struct {
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *UserResponse) Reset()                    { *m = UserResponse{} }
func (m *UserResponse) String() string            { return proto.CompactTextString(m) }
func (*UserResponse) ProtoMessage()               {}
func (*UserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UserResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type Store struct {
	Id      int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Title   string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Address string `protobuf:"bytes,3,opt,name=address" json:"address,omitempty"`
}

func (m *Store) Reset()                    { *m = Store{} }
func (m *Store) String() string            { return proto.CompactTextString(m) }
func (*Store) ProtoMessage()               {}
func (*Store) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Store) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Store) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Store) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type StoresRequest struct {
	Ids []int32 `protobuf:"varint,1,rep,packed,name=ids" json:"ids,omitempty"`
}

func (m *StoresRequest) Reset()                    { *m = StoresRequest{} }
func (m *StoresRequest) String() string            { return proto.CompactTextString(m) }
func (*StoresRequest) ProtoMessage()               {}
func (*StoresRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *StoresRequest) GetIds() []int32 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type StoresSearchRequest struct {
	Titles []string `protobuf:"bytes,1,rep,name=titles" json:"titles,omitempty"`
}

func (m *StoresSearchRequest) Reset()                    { *m = StoresSearchRequest{} }
func (m *StoresSearchRequest) String() string            { return proto.CompactTextString(m) }
func (*StoresSearchRequest) ProtoMessage()               {}
func (*StoresSearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *StoresSearchRequest) GetTitles() []string {
	if m != nil {
		return m.Titles
	}
	return nil
}

type StoreRequest struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *StoreRequest) Reset()                    { *m = StoreRequest{} }
func (m *StoreRequest) String() string            { return proto.CompactTextString(m) }
func (*StoreRequest) ProtoMessage()               {}
func (*StoreRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *StoreRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type StoresResponse struct {
	Stores []*Store `protobuf:"bytes,1,rep,name=stores" json:"stores,omitempty"`
}

func (m *StoresResponse) Reset()                    { *m = StoresResponse{} }
func (m *StoresResponse) String() string            { return proto.CompactTextString(m) }
func (*StoresResponse) ProtoMessage()               {}
func (*StoresResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *StoresResponse) GetStores() []*Store {
	if m != nil {
		return m.Stores
	}
	return nil
}

type StoreResponse struct {
	Store *Store `protobuf:"bytes,1,opt,name=store" json:"store,omitempty"`
}

func (m *StoreResponse) Reset()                    { *m = StoreResponse{} }
func (m *StoreResponse) String() string            { return proto.CompactTextString(m) }
func (*StoreResponse) ProtoMessage()               {}
func (*StoreResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *StoreResponse) GetStore() *Store {
	if m != nil {
		return m.Store
	}
	return nil
}

type Customer struct {
	Id      int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	StoreId int32  `protobuf:"varint,3,opt,name=store_id,json=storeId" json:"store_id,omitempty"`
	UserId  int32  `protobuf:"varint,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *Customer) Reset()                    { *m = Customer{} }
func (m *Customer) String() string            { return proto.CompactTextString(m) }
func (*Customer) ProtoMessage()               {}
func (*Customer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Customer) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Customer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Customer) GetStoreId() int32 {
	if m != nil {
		return m.StoreId
	}
	return 0
}

func (m *Customer) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type CustomersRequest struct {
	Ids []int32 `protobuf:"varint,1,rep,packed,name=ids" json:"ids,omitempty"`
}

func (m *CustomersRequest) Reset()                    { *m = CustomersRequest{} }
func (m *CustomersRequest) String() string            { return proto.CompactTextString(m) }
func (*CustomersRequest) ProtoMessage()               {}
func (*CustomersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CustomersRequest) GetIds() []int32 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type CustomersSearchRequest struct {
	Names    []string `protobuf:"bytes,1,rep,name=names" json:"names,omitempty"`
	StoreIds []int32  `protobuf:"varint,2,rep,packed,name=store_ids,json=storeIds" json:"store_ids,omitempty"`
	UserId   int32    `protobuf:"varint,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *CustomersSearchRequest) Reset()                    { *m = CustomersSearchRequest{} }
func (m *CustomersSearchRequest) String() string            { return proto.CompactTextString(m) }
func (*CustomersSearchRequest) ProtoMessage()               {}
func (*CustomersSearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *CustomersSearchRequest) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *CustomersSearchRequest) GetStoreIds() []int32 {
	if m != nil {
		return m.StoreIds
	}
	return nil
}

func (m *CustomersSearchRequest) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type CustomerRequest struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *CustomerRequest) Reset()                    { *m = CustomerRequest{} }
func (m *CustomerRequest) String() string            { return proto.CompactTextString(m) }
func (*CustomerRequest) ProtoMessage()               {}
func (*CustomerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *CustomerRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type CustomersResponse struct {
	Stores []*Store `protobuf:"bytes,1,rep,name=stores" json:"stores,omitempty"`
}

func (m *CustomersResponse) Reset()                    { *m = CustomersResponse{} }
func (m *CustomersResponse) String() string            { return proto.CompactTextString(m) }
func (*CustomersResponse) ProtoMessage()               {}
func (*CustomersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *CustomersResponse) GetStores() []*Store {
	if m != nil {
		return m.Stores
	}
	return nil
}

type CustomerResponse struct {
	Store *Store `protobuf:"bytes,1,opt,name=store" json:"store,omitempty"`
}

func (m *CustomerResponse) Reset()                    { *m = CustomerResponse{} }
func (m *CustomerResponse) String() string            { return proto.CompactTextString(m) }
func (*CustomerResponse) ProtoMessage()               {}
func (*CustomerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *CustomerResponse) GetStore() *Store {
	if m != nil {
		return m.Store
	}
	return nil
}

func init() {
	proto.RegisterType((*User)(nil), "User")
	proto.RegisterType((*UsersRequest)(nil), "UsersRequest")
	proto.RegisterType((*UsersSearchRequest)(nil), "UsersSearchRequest")
	proto.RegisterType((*UserRequest)(nil), "UserRequest")
	proto.RegisterType((*UsersResponse)(nil), "UsersResponse")
	proto.RegisterType((*UserResponse)(nil), "UserResponse")
	proto.RegisterType((*Store)(nil), "Store")
	proto.RegisterType((*StoresRequest)(nil), "StoresRequest")
	proto.RegisterType((*StoresSearchRequest)(nil), "StoresSearchRequest")
	proto.RegisterType((*StoreRequest)(nil), "StoreRequest")
	proto.RegisterType((*StoresResponse)(nil), "StoresResponse")
	proto.RegisterType((*StoreResponse)(nil), "StoreResponse")
	proto.RegisterType((*Customer)(nil), "Customer")
	proto.RegisterType((*CustomersRequest)(nil), "CustomersRequest")
	proto.RegisterType((*CustomersSearchRequest)(nil), "CustomersSearchRequest")
	proto.RegisterType((*CustomerRequest)(nil), "CustomerRequest")
	proto.RegisterType((*CustomersResponse)(nil), "CustomersResponse")
	proto.RegisterType((*CustomerResponse)(nil), "CustomerResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserService service

type UserServiceClient interface {
	GetUsers(ctx context.Context, in *UsersRequest, opts ...client.CallOption) (*UsersResponse, error)
	SearchUsers(ctx context.Context, in *UsersSearchRequest, opts ...client.CallOption) (*UsersResponse, error)
	GetUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error)
	GetStores(ctx context.Context, in *StoresRequest, opts ...client.CallOption) (*StoresResponse, error)
	SearchStores(ctx context.Context, in *StoresSearchRequest, opts ...client.CallOption) (*StoresResponse, error)
	GetStore(ctx context.Context, in *StoreRequest, opts ...client.CallOption) (*StoreResponse, error)
	GetCustomers(ctx context.Context, in *CustomersRequest, opts ...client.CallOption) (*CustomersResponse, error)
	SearchCustomers(ctx context.Context, in *CustomersSearchRequest, opts ...client.CallOption) (*CustomersResponse, error)
	GetCustomer(ctx context.Context, in *CustomerRequest, opts ...client.CallOption) (*CustomerResponse, error)
}

type userServiceClient struct {
	c           client.Client
	serviceName string
}

func NewUserServiceClient(serviceName string, c client.Client) UserServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "userservice"
	}
	return &userServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *userServiceClient) GetUsers(ctx context.Context, in *UsersRequest, opts ...client.CallOption) (*UsersResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserService.GetUsers", in)
	out := new(UsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SearchUsers(ctx context.Context, in *UsersSearchRequest, opts ...client.CallOption) (*UsersResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserService.SearchUsers", in)
	out := new(UsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserService.GetUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetStores(ctx context.Context, in *StoresRequest, opts ...client.CallOption) (*StoresResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserService.GetStores", in)
	out := new(StoresResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SearchStores(ctx context.Context, in *StoresSearchRequest, opts ...client.CallOption) (*StoresResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserService.SearchStores", in)
	out := new(StoresResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetStore(ctx context.Context, in *StoreRequest, opts ...client.CallOption) (*StoreResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserService.GetStore", in)
	out := new(StoreResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetCustomers(ctx context.Context, in *CustomersRequest, opts ...client.CallOption) (*CustomersResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserService.GetCustomers", in)
	out := new(CustomersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SearchCustomers(ctx context.Context, in *CustomersSearchRequest, opts ...client.CallOption) (*CustomersResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserService.SearchCustomers", in)
	out := new(CustomersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetCustomer(ctx context.Context, in *CustomerRequest, opts ...client.CallOption) (*CustomerResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserService.GetCustomer", in)
	out := new(CustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	GetUsers(context.Context, *UsersRequest, *UsersResponse) error
	SearchUsers(context.Context, *UsersSearchRequest, *UsersResponse) error
	GetUser(context.Context, *UserRequest, *UserResponse) error
	GetStores(context.Context, *StoresRequest, *StoresResponse) error
	SearchStores(context.Context, *StoresSearchRequest, *StoresResponse) error
	GetStore(context.Context, *StoreRequest, *StoreResponse) error
	GetCustomers(context.Context, *CustomersRequest, *CustomersResponse) error
	SearchCustomers(context.Context, *CustomersSearchRequest, *CustomersResponse) error
	GetCustomer(context.Context, *CustomerRequest, *CustomerResponse) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&UserService{hdlr}, opts...))
}

type UserService struct {
	UserServiceHandler
}

func (h *UserService) GetUsers(ctx context.Context, in *UsersRequest, out *UsersResponse) error {
	return h.UserServiceHandler.GetUsers(ctx, in, out)
}

func (h *UserService) SearchUsers(ctx context.Context, in *UsersSearchRequest, out *UsersResponse) error {
	return h.UserServiceHandler.SearchUsers(ctx, in, out)
}

func (h *UserService) GetUser(ctx context.Context, in *UserRequest, out *UserResponse) error {
	return h.UserServiceHandler.GetUser(ctx, in, out)
}

func (h *UserService) GetStores(ctx context.Context, in *StoresRequest, out *StoresResponse) error {
	return h.UserServiceHandler.GetStores(ctx, in, out)
}

func (h *UserService) SearchStores(ctx context.Context, in *StoresSearchRequest, out *StoresResponse) error {
	return h.UserServiceHandler.SearchStores(ctx, in, out)
}

func (h *UserService) GetStore(ctx context.Context, in *StoreRequest, out *StoreResponse) error {
	return h.UserServiceHandler.GetStore(ctx, in, out)
}

func (h *UserService) GetCustomers(ctx context.Context, in *CustomersRequest, out *CustomersResponse) error {
	return h.UserServiceHandler.GetCustomers(ctx, in, out)
}

func (h *UserService) SearchCustomers(ctx context.Context, in *CustomersSearchRequest, out *CustomersResponse) error {
	return h.UserServiceHandler.SearchCustomers(ctx, in, out)
}

func (h *UserService) GetCustomer(ctx context.Context, in *CustomerRequest, out *CustomerResponse) error {
	return h.UserServiceHandler.GetCustomer(ctx, in, out)
}

func init() { proto.RegisterFile("user.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 560 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x49, 0x6f, 0xdb, 0x3c,
	0x10, 0xf5, 0x46, 0x2f, 0xe3, 0x7d, 0x62, 0x24, 0x8a, 0xf2, 0x7d, 0x81, 0x43, 0xf4, 0xe0, 0x2e,
	0x21, 0x82, 0x24, 0x40, 0xaf, 0x05, 0x7a, 0x30, 0x72, 0x95, 0xd1, 0x73, 0xe1, 0x44, 0x04, 0xa2,
	0xc2, 0xb6, 0x5c, 0x51, 0xee, 0xff, 0xed, 0x3f, 0x29, 0x38, 0x43, 0x39, 0x92, 0x97, 0xc0, 0x37,
	0xcd, 0xf0, 0xcd, 0xbc, 0xe1, 0xe3, 0x3c, 0x01, 0x6c, 0x8c, 0x4e, 0xd4, 0x3a, 0x89, 0xd3, 0x58,
	0xfe, 0x82, 0xda, 0x0f, 0xa3, 0x13, 0xec, 0x41, 0x25, 0x0a, 0xbd, 0xf2, 0xb8, 0x3c, 0x11, 0x41,
	0x25, 0x0a, 0x11, 0xa1, 0xb6, 0x9a, 0x2f, 0xb5, 0x57, 0x19, 0x97, 0x27, 0xad, 0x80, 0xbe, 0x71,
	0x04, 0x62, 0xfd, 0x1a, 0xaf, 0xb4, 0x57, 0xa5, 0x24, 0x07, 0x36, 0xab, 0x97, 0xf3, 0x68, 0xe1,
	0xd5, 0x38, 0x4b, 0x81, 0xad, 0x4f, 0xe2, 0x85, 0xf6, 0x04, 0x75, 0xa4, 0x6f, 0x39, 0x86, 0x8e,
	0xe5, 0x32, 0x81, 0xfe, 0xbd, 0xd1, 0x26, 0xc5, 0x01, 0x54, 0xa3, 0xd0, 0x78, 0xe5, 0x71, 0x75,
	0x22, 0x02, 0xfb, 0x29, 0x3f, 0x01, 0x12, 0x62, 0xa6, 0xe7, 0xc9, 0xcb, 0x6b, 0x86, 0x1b, 0x81,
	0xb0, 0xfc, 0x8c, 0x6c, 0x05, 0x1c, 0xc8, 0xff, 0xa1, 0x6d, 0xb1, 0x19, 0x68, 0xe7, 0x02, 0xf2,
	0x0b, 0x74, 0x1d, 0x99, 0x59, 0xc7, 0x2b, 0xa3, 0xf1, 0x0a, 0x84, 0xbd, 0x37, 0x77, 0x69, 0xdf,
	0x0b, 0x45, 0xd5, 0x9c, 0x93, 0x1f, 0x79, 0xb4, 0x2d, 0xf8, 0x12, 0x6a, 0xf6, 0x80, 0xfa, 0x6d,
	0xb1, 0x94, 0x92, 0x53, 0x10, 0xb3, 0x34, 0x4e, 0xf4, 0x9e, 0x64, 0x23, 0x10, 0x69, 0x94, 0x2e,
	0x32, 0xcd, 0x38, 0x40, 0x0f, 0x1a, 0xf3, 0x30, 0x4c, 0xb4, 0x31, 0x4e, 0xb6, 0x2c, 0x94, 0x37,
	0xd0, 0xa5, 0x46, 0xef, 0xe8, 0x71, 0x0b, 0x67, 0x0c, 0x29, 0x0a, 0x72, 0x0e, 0x75, 0x6a, 0x9e,
	0x29, 0xe2, 0x22, 0x79, 0x0d, 0x1d, 0x82, 0x1f, 0xd3, 0xe4, 0x0e, 0x7a, 0x19, 0xa3, 0xbb, 0xe7,
	0x35, 0xd4, 0x0d, 0x65, 0x9c, 0x2a, 0x75, 0xc5, 0x0d, 0x5c, 0x56, 0xde, 0xba, 0x19, 0xb7, 0x05,
	0xff, 0x81, 0xa0, 0x23, 0xa7, 0x4c, 0x86, 0xe7, 0xa4, 0x7c, 0x86, 0xe6, 0xf7, 0x8d, 0x49, 0xe3,
	0xe5, 0x89, 0x1b, 0x75, 0x09, 0x4d, 0x2a, 0xfc, 0x19, 0x85, 0xa4, 0x8e, 0x08, 0x1a, 0x14, 0x3f,
	0x85, 0x78, 0x01, 0x0d, 0x2b, 0xb7, 0x3d, 0xa9, 0xd1, 0x49, 0xdd, 0x86, 0x4f, 0xa1, 0xfc, 0x00,
	0x83, 0x8c, 0xe3, 0x1d, 0xe5, 0x42, 0x38, 0xdf, 0xa2, 0x4e, 0xd8, 0x26, 0xbc, 0x82, 0x56, 0x36,
	0x89, 0xf1, 0x2a, 0xd4, 0xa7, 0xe9, 0x46, 0x31, 0xf9, 0x59, 0xaa, 0x85, 0x59, 0x6e, 0xa0, 0x9f,
	0xb1, 0x1c, 0xd3, 0xfc, 0x01, 0x86, 0xb9, 0x71, 0x4f, 0x94, 0xfd, 0xee, 0xed, 0x8e, 0xa7, 0x29,
	0x7f, 0xff, 0xb7, 0xca, 0x76, 0x98, 0xe9, 0xe4, 0x4f, 0xf4, 0xa2, 0xf1, 0x33, 0x34, 0xa7, 0x3a,
	0x25, 0x07, 0x60, 0x57, 0xe5, 0x6d, 0xe7, 0xf7, 0x54, 0xc1, 0x18, 0xb2, 0x84, 0x8f, 0xd0, 0x66,
	0x8d, 0x18, 0x7f, 0xa6, 0xf6, 0x4d, 0x78, 0xa0, 0x6a, 0x02, 0x0d, 0x47, 0x81, 0x1d, 0x95, 0xb3,
	0xa2, 0xdf, 0x55, 0x79, 0x2f, 0xc9, 0x12, 0x2a, 0x68, 0x4d, 0x75, 0xca, 0xab, 0x87, 0x3d, 0x55,
	0xd8, 0x7a, 0xbf, 0xaf, 0x8a, 0x3b, 0x29, 0x4b, 0xf8, 0x15, 0x3a, 0x4c, 0xee, 0x4a, 0x46, 0xea,
	0x80, 0x0b, 0x0e, 0x15, 0xf2, 0xad, 0xd9, 0x9e, 0x5d, 0x95, 0xf7, 0x82, 0xdf, 0x53, 0x85, 0x45,
	0x66, 0x96, 0xa9, 0x4e, 0xb7, 0x8f, 0x83, 0x43, 0xb5, 0xbb, 0x57, 0x3e, 0xaa, 0xbd, 0xb7, 0x93,
	0x25, 0xfc, 0x06, 0x7d, 0x9e, 0xe4, 0xad, 0xf6, 0x42, 0x1d, 0xde, 0xb6, 0x23, 0x1d, 0x1e, 0xa1,
	0x9d, 0xa3, 0xc6, 0x81, 0xda, 0xd9, 0x22, 0x7f, 0xa8, 0x76, 0xdf, 0x5f, 0x96, 0x9e, 0xeb, 0xf4,
	0xcb, 0x7e, 0xf8, 0x17, 0x00, 0x00, 0xff, 0xff, 0x6e, 0x2d, 0x76, 0xe7, 0xc0, 0x05, 0x00, 0x00,
}

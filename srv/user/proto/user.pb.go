// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

/*
Package user is a generated protocol buffer package.

It is generated from these files:
	user.proto

It has these top-level messages:
	User
	UsersRequest
	UsersSearchRequest
	UserRequest
	UsersResponse
	UserResponse
	DeleteResponse
	Store
	StoresRequest
	StoresSearchRequest
	StoreRequest
	StoresResponse
	StoreResponse
	Customer
	CustomersRequest
	CustomersSearchRequest
	CustomerRequest
	CustomersResponse
	CustomerResponse
*/
package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type User struct {
	Id    uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Phone string `protobuf:"bytes,3,opt,name=phone" json:"phone,omitempty"`
	Email string `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
	Role  uint32 `protobuf:"varint,5,opt,name=role" json:"role,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *User) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetRole() uint32 {
	if m != nil {
		return m.Role
	}
	return 0
}

type UsersRequest struct {
	Ids []uint32 `protobuf:"varint,1,rep,packed,name=ids" json:"ids,omitempty"`
}

func (m *UsersRequest) Reset()                    { *m = UsersRequest{} }
func (m *UsersRequest) String() string            { return proto.CompactTextString(m) }
func (*UsersRequest) ProtoMessage()               {}
func (*UsersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UsersRequest) GetIds() []uint32 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type UsersSearchRequest struct {
	Names []string `protobuf:"bytes,1,rep,name=names" json:"names,omitempty"`
}

func (m *UsersSearchRequest) Reset()                    { *m = UsersSearchRequest{} }
func (m *UsersSearchRequest) String() string            { return proto.CompactTextString(m) }
func (*UsersSearchRequest) ProtoMessage()               {}
func (*UsersSearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UsersSearchRequest) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type UserRequest struct {
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *UserRequest) Reset()                    { *m = UserRequest{} }
func (m *UserRequest) String() string            { return proto.CompactTextString(m) }
func (*UserRequest) ProtoMessage()               {}
func (*UserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UserRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type UsersResponse struct {
	Users []*User `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
}

func (m *UsersResponse) Reset()                    { *m = UsersResponse{} }
func (m *UsersResponse) String() string            { return proto.CompactTextString(m) }
func (*UsersResponse) ProtoMessage()               {}
func (*UsersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UsersResponse) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type UserResponse struct {
	User    *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Success bool  `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *UserResponse) Reset()                    { *m = UserResponse{} }
func (m *UserResponse) String() string            { return proto.CompactTextString(m) }
func (*UserResponse) ProtoMessage()               {}
func (*UserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UserResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type DeleteResponse struct {
	Success  bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	ErrorMsg string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DeleteResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *DeleteResponse) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

type Store struct {
	Id      uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Title   string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Address string `protobuf:"bytes,3,opt,name=address" json:"address,omitempty"`
}

func (m *Store) Reset()                    { *m = Store{} }
func (m *Store) String() string            { return proto.CompactTextString(m) }
func (*Store) ProtoMessage()               {}
func (*Store) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Store) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Store) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Store) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type StoresRequest struct {
	Ids []uint32 `protobuf:"varint,1,rep,packed,name=ids" json:"ids,omitempty"`
}

func (m *StoresRequest) Reset()                    { *m = StoresRequest{} }
func (m *StoresRequest) String() string            { return proto.CompactTextString(m) }
func (*StoresRequest) ProtoMessage()               {}
func (*StoresRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *StoresRequest) GetIds() []uint32 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type StoresSearchRequest struct {
	Titles []string `protobuf:"bytes,1,rep,name=titles" json:"titles,omitempty"`
}

func (m *StoresSearchRequest) Reset()                    { *m = StoresSearchRequest{} }
func (m *StoresSearchRequest) String() string            { return proto.CompactTextString(m) }
func (*StoresSearchRequest) ProtoMessage()               {}
func (*StoresSearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *StoresSearchRequest) GetTitles() []string {
	if m != nil {
		return m.Titles
	}
	return nil
}

type StoreRequest struct {
	Store *Store `protobuf:"bytes,1,opt,name=store" json:"store,omitempty"`
}

func (m *StoreRequest) Reset()                    { *m = StoreRequest{} }
func (m *StoreRequest) String() string            { return proto.CompactTextString(m) }
func (*StoreRequest) ProtoMessage()               {}
func (*StoreRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *StoreRequest) GetStore() *Store {
	if m != nil {
		return m.Store
	}
	return nil
}

type StoresResponse struct {
	Stores []*Store `protobuf:"bytes,1,rep,name=stores" json:"stores,omitempty"`
}

func (m *StoresResponse) Reset()                    { *m = StoresResponse{} }
func (m *StoresResponse) String() string            { return proto.CompactTextString(m) }
func (*StoresResponse) ProtoMessage()               {}
func (*StoresResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *StoresResponse) GetStores() []*Store {
	if m != nil {
		return m.Stores
	}
	return nil
}

type StoreResponse struct {
	Store   *Store `protobuf:"bytes,1,opt,name=store" json:"store,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *StoreResponse) Reset()                    { *m = StoreResponse{} }
func (m *StoreResponse) String() string            { return proto.CompactTextString(m) }
func (*StoreResponse) ProtoMessage()               {}
func (*StoreResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *StoreResponse) GetStore() *Store {
	if m != nil {
		return m.Store
	}
	return nil
}

func (m *StoreResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type Customer struct {
	Id      uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	StoreId uint32 `protobuf:"varint,3,opt,name=store_id,json=storeId" json:"store_id,omitempty"`
	UserId  uint32 `protobuf:"varint,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *Customer) Reset()                    { *m = Customer{} }
func (m *Customer) String() string            { return proto.CompactTextString(m) }
func (*Customer) ProtoMessage()               {}
func (*Customer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Customer) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Customer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Customer) GetStoreId() uint32 {
	if m != nil {
		return m.StoreId
	}
	return 0
}

func (m *Customer) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type CustomersRequest struct {
	Ids []uint32 `protobuf:"varint,1,rep,packed,name=ids" json:"ids,omitempty"`
}

func (m *CustomersRequest) Reset()                    { *m = CustomersRequest{} }
func (m *CustomersRequest) String() string            { return proto.CompactTextString(m) }
func (*CustomersRequest) ProtoMessage()               {}
func (*CustomersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *CustomersRequest) GetIds() []uint32 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type CustomersSearchRequest struct {
	Names    []string `protobuf:"bytes,1,rep,name=names" json:"names,omitempty"`
	StoreIds []uint32 `protobuf:"varint,2,rep,packed,name=store_ids,json=storeIds" json:"store_ids,omitempty"`
	UserId   uint32   `protobuf:"varint,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *CustomersSearchRequest) Reset()                    { *m = CustomersSearchRequest{} }
func (m *CustomersSearchRequest) String() string            { return proto.CompactTextString(m) }
func (*CustomersSearchRequest) ProtoMessage()               {}
func (*CustomersSearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *CustomersSearchRequest) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *CustomersSearchRequest) GetStoreIds() []uint32 {
	if m != nil {
		return m.StoreIds
	}
	return nil
}

func (m *CustomersSearchRequest) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type CustomerRequest struct {
	Customer *Customer `protobuf:"bytes,1,opt,name=customer" json:"customer,omitempty"`
}

func (m *CustomerRequest) Reset()                    { *m = CustomerRequest{} }
func (m *CustomerRequest) String() string            { return proto.CompactTextString(m) }
func (*CustomerRequest) ProtoMessage()               {}
func (*CustomerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *CustomerRequest) GetCustomer() *Customer {
	if m != nil {
		return m.Customer
	}
	return nil
}

type CustomersResponse struct {
	Customers []*Customer `protobuf:"bytes,1,rep,name=customers" json:"customers,omitempty"`
}

func (m *CustomersResponse) Reset()                    { *m = CustomersResponse{} }
func (m *CustomersResponse) String() string            { return proto.CompactTextString(m) }
func (*CustomersResponse) ProtoMessage()               {}
func (*CustomersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *CustomersResponse) GetCustomers() []*Customer {
	if m != nil {
		return m.Customers
	}
	return nil
}

type CustomerResponse struct {
	Customer *Customer `protobuf:"bytes,1,opt,name=customer" json:"customer,omitempty"`
	Success  bool      `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *CustomerResponse) Reset()                    { *m = CustomerResponse{} }
func (m *CustomerResponse) String() string            { return proto.CompactTextString(m) }
func (*CustomerResponse) ProtoMessage()               {}
func (*CustomerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *CustomerResponse) GetCustomer() *Customer {
	if m != nil {
		return m.Customer
	}
	return nil
}

func (m *CustomerResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*User)(nil), "User")
	proto.RegisterType((*UsersRequest)(nil), "UsersRequest")
	proto.RegisterType((*UsersSearchRequest)(nil), "UsersSearchRequest")
	proto.RegisterType((*UserRequest)(nil), "UserRequest")
	proto.RegisterType((*UsersResponse)(nil), "UsersResponse")
	proto.RegisterType((*UserResponse)(nil), "UserResponse")
	proto.RegisterType((*DeleteResponse)(nil), "DeleteResponse")
	proto.RegisterType((*Store)(nil), "Store")
	proto.RegisterType((*StoresRequest)(nil), "StoresRequest")
	proto.RegisterType((*StoresSearchRequest)(nil), "StoresSearchRequest")
	proto.RegisterType((*StoreRequest)(nil), "StoreRequest")
	proto.RegisterType((*StoresResponse)(nil), "StoresResponse")
	proto.RegisterType((*StoreResponse)(nil), "StoreResponse")
	proto.RegisterType((*Customer)(nil), "Customer")
	proto.RegisterType((*CustomersRequest)(nil), "CustomersRequest")
	proto.RegisterType((*CustomersSearchRequest)(nil), "CustomersSearchRequest")
	proto.RegisterType((*CustomerRequest)(nil), "CustomerRequest")
	proto.RegisterType((*CustomersResponse)(nil), "CustomersResponse")
	proto.RegisterType((*CustomerResponse)(nil), "CustomerResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Service service

type ServiceClient interface {
	GetUsers(ctx context.Context, in *UsersRequest, opts ...client.CallOption) (*UsersResponse, error)
	SearchUsers(ctx context.Context, in *UsersSearchRequest, opts ...client.CallOption) (*UsersResponse, error)
	GetUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error)
	CreateUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error)
	UpdateUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error)
	DeleteUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*DeleteResponse, error)
	GetStores(ctx context.Context, in *StoresRequest, opts ...client.CallOption) (*StoresResponse, error)
	SearchStores(ctx context.Context, in *StoresSearchRequest, opts ...client.CallOption) (*StoresResponse, error)
	GetStore(ctx context.Context, in *StoreRequest, opts ...client.CallOption) (*StoreResponse, error)
	CreateStore(ctx context.Context, in *StoreRequest, opts ...client.CallOption) (*StoreResponse, error)
	UpdateStore(ctx context.Context, in *StoreRequest, opts ...client.CallOption) (*StoreResponse, error)
	DeleteStore(ctx context.Context, in *StoreRequest, opts ...client.CallOption) (*DeleteResponse, error)
	GetCustomers(ctx context.Context, in *CustomersRequest, opts ...client.CallOption) (*CustomersResponse, error)
	SearchCustomers(ctx context.Context, in *CustomersSearchRequest, opts ...client.CallOption) (*CustomersResponse, error)
	GetCustomer(ctx context.Context, in *CustomerRequest, opts ...client.CallOption) (*CustomerResponse, error)
	CreateCustomer(ctx context.Context, in *CustomerRequest, opts ...client.CallOption) (*CustomerResponse, error)
	UpdateCustomer(ctx context.Context, in *CustomerRequest, opts ...client.CallOption) (*CustomerResponse, error)
	DeleteCustomer(ctx context.Context, in *CustomerRequest, opts ...client.CallOption) (*DeleteResponse, error)
}

type serviceClient struct {
	c           client.Client
	serviceName string
}

func NewServiceClient(serviceName string, c client.Client) ServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "service"
	}
	return &serviceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *serviceClient) GetUsers(ctx context.Context, in *UsersRequest, opts ...client.CallOption) (*UsersResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Service.GetUsers", in)
	out := new(UsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SearchUsers(ctx context.Context, in *UsersSearchRequest, opts ...client.CallOption) (*UsersResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Service.SearchUsers", in)
	out := new(UsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Service.GetUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CreateUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Service.CreateUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Service.UpdateUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Service.DeleteUser", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetStores(ctx context.Context, in *StoresRequest, opts ...client.CallOption) (*StoresResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Service.GetStores", in)
	out := new(StoresResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SearchStores(ctx context.Context, in *StoresSearchRequest, opts ...client.CallOption) (*StoresResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Service.SearchStores", in)
	out := new(StoresResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetStore(ctx context.Context, in *StoreRequest, opts ...client.CallOption) (*StoreResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Service.GetStore", in)
	out := new(StoreResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CreateStore(ctx context.Context, in *StoreRequest, opts ...client.CallOption) (*StoreResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Service.CreateStore", in)
	out := new(StoreResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateStore(ctx context.Context, in *StoreRequest, opts ...client.CallOption) (*StoreResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Service.UpdateStore", in)
	out := new(StoreResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteStore(ctx context.Context, in *StoreRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Service.DeleteStore", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetCustomers(ctx context.Context, in *CustomersRequest, opts ...client.CallOption) (*CustomersResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Service.GetCustomers", in)
	out := new(CustomersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SearchCustomers(ctx context.Context, in *CustomersSearchRequest, opts ...client.CallOption) (*CustomersResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Service.SearchCustomers", in)
	out := new(CustomersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetCustomer(ctx context.Context, in *CustomerRequest, opts ...client.CallOption) (*CustomerResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Service.GetCustomer", in)
	out := new(CustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CreateCustomer(ctx context.Context, in *CustomerRequest, opts ...client.CallOption) (*CustomerResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Service.CreateCustomer", in)
	out := new(CustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateCustomer(ctx context.Context, in *CustomerRequest, opts ...client.CallOption) (*CustomerResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Service.UpdateCustomer", in)
	out := new(CustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteCustomer(ctx context.Context, in *CustomerRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Service.DeleteCustomer", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Service service

type ServiceHandler interface {
	GetUsers(context.Context, *UsersRequest, *UsersResponse) error
	SearchUsers(context.Context, *UsersSearchRequest, *UsersResponse) error
	GetUser(context.Context, *UserRequest, *UserResponse) error
	CreateUser(context.Context, *UserRequest, *UserResponse) error
	UpdateUser(context.Context, *UserRequest, *UserResponse) error
	DeleteUser(context.Context, *UserRequest, *DeleteResponse) error
	GetStores(context.Context, *StoresRequest, *StoresResponse) error
	SearchStores(context.Context, *StoresSearchRequest, *StoresResponse) error
	GetStore(context.Context, *StoreRequest, *StoreResponse) error
	CreateStore(context.Context, *StoreRequest, *StoreResponse) error
	UpdateStore(context.Context, *StoreRequest, *StoreResponse) error
	DeleteStore(context.Context, *StoreRequest, *DeleteResponse) error
	GetCustomers(context.Context, *CustomersRequest, *CustomersResponse) error
	SearchCustomers(context.Context, *CustomersSearchRequest, *CustomersResponse) error
	GetCustomer(context.Context, *CustomerRequest, *CustomerResponse) error
	CreateCustomer(context.Context, *CustomerRequest, *CustomerResponse) error
	UpdateCustomer(context.Context, *CustomerRequest, *CustomerResponse) error
	DeleteCustomer(context.Context, *CustomerRequest, *DeleteResponse) error
}

func RegisterServiceHandler(s server.Server, hdlr ServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Service{hdlr}, opts...))
}

type Service struct {
	ServiceHandler
}

func (h *Service) GetUsers(ctx context.Context, in *UsersRequest, out *UsersResponse) error {
	return h.ServiceHandler.GetUsers(ctx, in, out)
}

func (h *Service) SearchUsers(ctx context.Context, in *UsersSearchRequest, out *UsersResponse) error {
	return h.ServiceHandler.SearchUsers(ctx, in, out)
}

func (h *Service) GetUser(ctx context.Context, in *UserRequest, out *UserResponse) error {
	return h.ServiceHandler.GetUser(ctx, in, out)
}

func (h *Service) CreateUser(ctx context.Context, in *UserRequest, out *UserResponse) error {
	return h.ServiceHandler.CreateUser(ctx, in, out)
}

func (h *Service) UpdateUser(ctx context.Context, in *UserRequest, out *UserResponse) error {
	return h.ServiceHandler.UpdateUser(ctx, in, out)
}

func (h *Service) DeleteUser(ctx context.Context, in *UserRequest, out *DeleteResponse) error {
	return h.ServiceHandler.DeleteUser(ctx, in, out)
}

func (h *Service) GetStores(ctx context.Context, in *StoresRequest, out *StoresResponse) error {
	return h.ServiceHandler.GetStores(ctx, in, out)
}

func (h *Service) SearchStores(ctx context.Context, in *StoresSearchRequest, out *StoresResponse) error {
	return h.ServiceHandler.SearchStores(ctx, in, out)
}

func (h *Service) GetStore(ctx context.Context, in *StoreRequest, out *StoreResponse) error {
	return h.ServiceHandler.GetStore(ctx, in, out)
}

func (h *Service) CreateStore(ctx context.Context, in *StoreRequest, out *StoreResponse) error {
	return h.ServiceHandler.CreateStore(ctx, in, out)
}

func (h *Service) UpdateStore(ctx context.Context, in *StoreRequest, out *StoreResponse) error {
	return h.ServiceHandler.UpdateStore(ctx, in, out)
}

func (h *Service) DeleteStore(ctx context.Context, in *StoreRequest, out *DeleteResponse) error {
	return h.ServiceHandler.DeleteStore(ctx, in, out)
}

func (h *Service) GetCustomers(ctx context.Context, in *CustomersRequest, out *CustomersResponse) error {
	return h.ServiceHandler.GetCustomers(ctx, in, out)
}

func (h *Service) SearchCustomers(ctx context.Context, in *CustomersSearchRequest, out *CustomersResponse) error {
	return h.ServiceHandler.SearchCustomers(ctx, in, out)
}

func (h *Service) GetCustomer(ctx context.Context, in *CustomerRequest, out *CustomerResponse) error {
	return h.ServiceHandler.GetCustomer(ctx, in, out)
}

func (h *Service) CreateCustomer(ctx context.Context, in *CustomerRequest, out *CustomerResponse) error {
	return h.ServiceHandler.CreateCustomer(ctx, in, out)
}

func (h *Service) UpdateCustomer(ctx context.Context, in *CustomerRequest, out *CustomerResponse) error {
	return h.ServiceHandler.UpdateCustomer(ctx, in, out)
}

func (h *Service) DeleteCustomer(ctx context.Context, in *CustomerRequest, out *DeleteResponse) error {
	return h.ServiceHandler.DeleteCustomer(ctx, in, out)
}

func init() { proto.RegisterFile("user.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 704 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x5f, 0x6f, 0xda, 0x3e,
	0x14, 0x85, 0x42, 0x20, 0x5c, 0x48, 0x68, 0x5d, 0xd4, 0xa6, 0xf4, 0xa7, 0x9f, 0x98, 0xb5, 0x69,
	0x68, 0x6d, 0xbd, 0xa9, 0xeb, 0xd4, 0x3d, 0xec, 0x61, 0x52, 0x27, 0xa1, 0x3e, 0xec, 0x25, 0xa8,
	0xcf, 0x15, 0x25, 0x56, 0x9b, 0x09, 0x1a, 0x66, 0x87, 0x7d, 0x9e, 0x7d, 0xd4, 0xc9, 0xbe, 0x76,
	0x9a, 0x94, 0x14, 0x65, 0x7b, 0xcb, 0xbd, 0xf7, 0xdc, 0x3f, 0x3e, 0xd7, 0xc7, 0x00, 0xb0, 0x96,
	0x5c, 0xb0, 0x95, 0x48, 0xd2, 0x84, 0xfe, 0x80, 0xe6, 0x8d, 0xe4, 0x82, 0xf8, 0xb0, 0x13, 0x47,
	0x41, 0x7d, 0x54, 0x1f, 0x7b, 0xe1, 0x4e, 0x1c, 0x11, 0x02, 0xcd, 0xc7, 0xd9, 0x92, 0x07, 0x3b,
	0xa3, 0xfa, 0xb8, 0x13, 0xea, 0x6f, 0x32, 0x00, 0x67, 0xf5, 0x90, 0x3c, 0xf2, 0xa0, 0xa1, 0x9d,
	0x68, 0x28, 0x2f, 0x5f, 0xce, 0xe2, 0x45, 0xd0, 0x44, 0xaf, 0x36, 0x54, 0xbe, 0x48, 0x16, 0x3c,
	0x70, 0x74, 0x45, 0xfd, 0x4d, 0x47, 0xd0, 0x53, 0xbd, 0x64, 0xc8, 0x7f, 0xae, 0xb9, 0x4c, 0xc9,
	0x2e, 0x34, 0xe2, 0x48, 0x06, 0xf5, 0x51, 0x63, 0xec, 0x85, 0xea, 0x93, 0xbe, 0x03, 0xa2, 0x11,
	0x53, 0x3e, 0x13, 0xf3, 0x07, 0x8b, 0x1b, 0x80, 0xa3, 0xfa, 0x23, 0xb2, 0x13, 0xa2, 0x41, 0xc7,
	0xd0, 0x55, 0x58, 0x0b, 0x3a, 0x82, 0xa6, 0x3a, 0x96, 0x3e, 0x42, 0xf7, 0xdc, 0x61, 0x3a, 0xa6,
	0x5d, 0xf4, 0x14, 0x3c, 0xd3, 0x57, 0xae, 0x92, 0x47, 0xc9, 0xc9, 0x31, 0x38, 0x2a, 0x80, 0x05,
	0x33, 0x30, 0xfa, 0xe8, 0x15, 0x4e, 0x99, 0x81, 0x5f, 0x2e, 0x4c, 0x02, 0x68, 0xcb, 0xf5, 0x7c,
	0xce, 0xa5, 0xd4, 0x3c, 0xb9, 0xa1, 0x35, 0xe9, 0x04, 0xfc, 0x6f, 0x7c, 0xc1, 0x53, 0x9e, 0x95,
	0xc9, 0x61, 0xeb, 0x05, 0x2c, 0x39, 0x86, 0x0e, 0x17, 0x22, 0x11, 0xb7, 0x4b, 0x79, 0x6f, 0xf8,
	0x76, 0xb5, 0xe3, 0xbb, 0xbc, 0xa7, 0x13, 0x70, 0xa6, 0x69, 0x22, 0xf8, 0xc6, 0x82, 0x06, 0xe0,
	0xa4, 0x71, 0xba, 0xb0, 0x1b, 0x42, 0x43, 0x75, 0x99, 0x45, 0x91, 0x50, 0x5d, 0x70, 0x49, 0xd6,
	0xa4, 0xaf, 0xc0, 0xd3, 0x85, 0xb6, 0xb0, 0x7f, 0x06, 0xfb, 0x08, 0x29, 0xd2, 0x7f, 0x00, 0x2d,
	0x5d, 0xdc, 0xf2, 0x6f, 0x2c, 0x7a, 0x0a, 0x3d, 0x0d, 0xb7, 0xb8, 0xff, 0xc0, 0x91, 0xca, 0x36,
	0x4c, 0xb5, 0x18, 0x46, 0xd1, 0x49, 0x3f, 0x80, 0x6f, 0xfb, 0x1b, 0x46, 0xfe, 0x87, 0x96, 0x0e,
	0xd9, 0x35, 0xd8, 0x04, 0xe3, 0xa5, 0x13, 0x33, 0x71, 0x96, 0xb0, 0xb5, 0xc1, 0x96, 0x65, 0xdc,
	0x81, 0x7b, 0xb5, 0x96, 0x69, 0xb2, 0xac, 0x78, 0xcf, 0x8f, 0xc0, 0xd5, 0x25, 0x6f, 0xe3, 0x48,
	0xb3, 0xe8, 0x85, 0x6d, 0x6d, 0x5f, 0x47, 0xe4, 0x10, 0xda, 0x6a, 0xf3, 0x2a, 0xd2, 0xd4, 0x91,
	0x96, 0x32, 0xaf, 0x23, 0xfa, 0x1a, 0x76, 0x6d, 0x8f, 0x2d, 0x0c, 0x47, 0x70, 0x90, 0xa1, 0x2a,
	0xdc, 0x71, 0x75, 0x35, 0xec, 0x24, 0xea, 0x54, 0xaa, 0x8e, 0x6b, 0x46, 0x91, 0xf9, 0x59, 0x1a,
	0x85, 0x59, 0x3e, 0x43, 0xdf, 0x76, 0xb1, 0xe5, 0xdf, 0x80, 0x3b, 0x37, 0x2e, 0xc3, 0x5e, 0x87,
	0x65, 0x98, 0x2c, 0x44, 0xbf, 0xc0, 0x5e, 0xee, 0x14, 0x86, 0xf6, 0xb7, 0xd0, 0xb1, 0x00, 0xbb,
	0xaa, 0x5c, 0xf2, 0x53, 0x8c, 0x4e, 0x9f, 0x38, 0xc8, 0x92, 0xab, 0x35, 0x7e, 0x79, 0x79, 0xe7,
	0xbf, 0xdb, 0xd0, 0x9e, 0x72, 0xf1, 0x2b, 0x9e, 0x73, 0x72, 0x02, 0xee, 0x84, 0xa7, 0x5a, 0xcb,
	0xc4, 0x63, 0xf9, 0xb7, 0x64, 0xe8, 0xb3, 0x82, 0xc4, 0x69, 0x8d, 0x5c, 0x40, 0x17, 0x29, 0x46,
	0xfc, 0x3e, 0xdb, 0x7c, 0x59, 0x4a, 0xb2, 0xc6, 0xd0, 0x36, 0x2d, 0x48, 0x8f, 0xe5, 0xde, 0x97,
	0xa1, 0xc7, 0xf2, 0xaf, 0x02, 0xad, 0x91, 0x13, 0x80, 0x2b, 0xc1, 0x67, 0x29, 0xaf, 0x08, 0xbe,
	0x59, 0x45, 0x15, 0xc1, 0x67, 0x00, 0xf8, 0x78, 0x94, 0x80, 0xfb, 0xac, 0xf8, 0xae, 0xd0, 0x1a,
	0x61, 0xd0, 0x99, 0xf0, 0x14, 0xc5, 0x45, 0x7c, 0x56, 0x50, 0xf9, 0xb0, 0xcf, 0x8a, 0xaa, 0xa3,
	0x35, 0x72, 0x09, 0x3d, 0x64, 0xc1, 0xa4, 0x0c, 0x58, 0x89, 0xea, 0xcb, 0x12, 0x91, 0x7e, 0x7c,
	0x8e, 0x3c, 0x96, 0xd7, 0xfe, 0xd0, 0x67, 0x05, 0xa9, 0xea, 0xa9, 0xba, 0x48, 0x4f, 0x75, 0x3c,
	0x32, 0x54, 0x11, 0xff, 0x1e, 0xba, 0xc8, 0x44, 0x29, 0xbe, 0x84, 0xa6, 0x4b, 0xe8, 0x4d, 0x78,
	0x9a, 0x5d, 0x6f, 0xb2, 0xc7, 0x9e, 0x0b, 0x76, 0x48, 0xd8, 0xc6, 0xed, 0xa7, 0x35, 0xf2, 0x15,
	0xfa, 0x48, 0xcd, 0x53, 0xee, 0x21, 0x2b, 0x97, 0xf1, 0x0b, 0x15, 0x2e, 0xa0, 0x9b, 0x6b, 0x4d,
	0x76, 0xd9, 0x33, 0x79, 0x0e, 0xf7, 0xd8, 0x73, 0xe1, 0xe8, 0x81, 0x7d, 0x64, 0xf0, 0x1f, 0x12,
	0x91, 0xca, 0xbf, 0x4d, 0xfc, 0x64, 0x7f, 0xb5, 0xb6, 0x24, 0x6e, 0x32, 0x7b, 0xd7, 0xd2, 0x7f,
	0x25, 0x3e, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0x25, 0x35, 0xc5, 0xde, 0x58, 0x08, 0x00, 0x00,
}
